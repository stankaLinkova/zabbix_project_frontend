[{"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\index.js":"1","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\App.js":"2","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Login.js":"3","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Home.js":"4","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\TableOfHostGroups.js":"5","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\PublicRoute.js":"6","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\PrivateRoute.js":"7","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\TableOfHosts.js":"8","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Map.js":"9","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\services\\httpService.js":"10","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\Common.js":"11","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\services\\authService.js":"12"},{"size":335,"mtime":1612881062556,"results":"13","hashOfConfig":"14"},{"size":4184,"mtime":1612969922180,"results":"15","hashOfConfig":"14"},{"size":2152,"mtime":1612969944473,"results":"16","hashOfConfig":"14"},{"size":150,"mtime":1612881062541,"results":"17","hashOfConfig":"14"},{"size":2152,"mtime":1612969961215,"results":"18","hashOfConfig":"14"},{"size":410,"mtime":1612881062541,"results":"19","hashOfConfig":"14"},{"size":559,"mtime":1612881062541,"results":"20","hashOfConfig":"14"},{"size":3299,"mtime":1612969966938,"results":"21","hashOfConfig":"14"},{"size":1728,"mtime":1612969953837,"results":"22","hashOfConfig":"14"},{"size":593,"mtime":1612881062563,"results":"23","hashOfConfig":"14"},{"size":957,"mtime":1612811787522,"results":"24","hashOfConfig":"14"},{"size":781,"mtime":1612813702995,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"1vz9dwm",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\index.js",["57","58"],"import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));",["59","60"],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\App.js",["61"],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Switch, Route, NavLink} from 'react-router-dom';\r\n\r\n\r\nimport Login from './components/Login';\r\nimport TableOfHostGroups from './components/TableOfHostGroups';\r\nimport Home from './components/Home';\r\nimport TableOfHosts from './components/TableOfHosts';\r\nimport Map from './components/Map';\r\nimport PrivateRoute from './Utils/PrivateRoute';\r\nimport PublicRoute from './Utils/PublicRoute';\r\nimport { getToken, removeUserSession, setUserSession } from './Utils/Common';\r\n\r\nimport http from \"./services/httpService\";\r\nimport {  logoutUser } from './Utils/Common';\r\n\r\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, Button} from 'reactstrap';\r\n\r\n\r\nfunction App() {\r\n  const [authLoading, setAuthLoading] = useState(true);\r\n  const [groupsId, setgroupsId] = useState([])\r\n  const [hostsId, sethostsId] = useState([])\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isLoaded, setIsLoaded ] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const token = getToken();\r\n    if (!token) {\r\n      return;\r\n    }\r\n\r\n    http.get(`http://localhost:3000/verifyToken?token=${token}`).then(response => {\r\n      setUserSession(response.data.token, response.data.user);\r\n      setAuthLoading(false);\r\n    }).catch(error => {\r\n      removeUserSession();\r\n      setAuthLoading(false);\r\n    });\r\n  }, []);\r\n\r\n\r\n\r\n  const handleHosts = (groups) => {\r\n    let idsSelected = [];\r\n    groups.map((group) => {\r\n      return idsSelected.push(Number(group[Object.keys(group)[0]]));\r\n    });\r\n    setgroupsId(idsSelected);\r\n  };\r\n\r\n  const handleMap = (hosts) => {\r\n    let idsSelected = [];\r\n    hosts.map((host) => {\r\n      return idsSelected.push(host[Object.keys(host)[0]]);\r\n    });\r\n    sethostsId(idsSelected);\r\n  };\r\n\r\n  const handleLogout = async() => {\r\n    await logoutUser();\r\n    removeUserSession();\r\n    return (\r\n      window.location.reload(false)\r\n    )\r\n  }\r\n\r\n  const toggle = () => {\r\n    if(isOpen){\r\n      setIsOpen(false);\r\n    } else {\r\n      setIsOpen(true);\r\n    }\r\n  }\r\n\r\n  const handleLoaded = () => {    \r\n    setIsLoaded(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <BrowserRouter>\r\n\r\n        <div>\r\n          <Navbar color=\"dark\"  light expand=\"md\">\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n                <NavLink style={{ color: 'white' }} exact activeClassName=\"active\" className=\"m-2\" to=\"/\">Home</NavLink>\r\n                <NavLink style={{ color: 'white' }} activeClassName=\"active\" className=\"m-2\" to=\"/login\">Login</NavLink>\r\n                <NavLink style={{ color: 'white' }} activeClassName=\"active\" className=\"m-2\" to=\"/host_groups\">Host Groups</NavLink>\r\n                \r\n                \r\n                <Nav className=\"ml-auto\" navbar>\r\n                    <NavItem>\r\n                      {isLoaded && <Button className=\"btn btn-light\" onClick={() => handleLogout()}>Logout</Button>}\r\n                    </NavItem>\r\n                  </Nav>\r\n            </Collapse>\r\n          </Navbar>\r\n          \r\n          \r\n\r\n          <div className=\"container-fluid\">\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <PublicRoute path=\"/login\" component={Login} />\r\n              <PrivateRoute path=\"/host_groups\" component={(props) => (\r\n                <TableOfHostGroups\r\n                  {...props}\r\n                  onSetLoaded={handleLoaded}\r\n                  onGetHosts={handleHosts}\r\n                ></TableOfHostGroups>\r\n              )}\r\n              />\r\n              <PrivateRoute path=\"/hosts\" component={(props) => (\r\n                <TableOfHosts\r\n                  {...props}\r\n                  groupsId={groupsId}\r\n                  onGetMap={handleMap}\r\n                ></TableOfHosts>\r\n              )}\r\n              />\r\n              <PrivateRoute path=\"/maps\" component={(props) => (\r\n                <Map {...props}\r\n                  hostsId={hostsId}>\r\n                </Map>\r\n              )}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Login.js",["62"],"import React, { useState } from 'react';\r\nimport { setUserSession } from '../Utils/Common';\r\nimport http from \"../services/httpService\";\r\nimport { apiUrl } from \"../config.json\";\r\nimport \"../App.css\";\r\nimport { FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nfunction Login(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const username = useFormInput('');\r\n  const password = useFormInput('');\r\n  const url = useFormInput('');\r\n  const [error, setError] = useState(null);\r\n\r\n  // handle button click of login form\r\n  const handleLogin = () => {\r\n    setError(null);\r\n    setLoading(true);\r\n    http.post(apiUrl + '/login', { url: url.value, username: username.value, password: password.value }).then(response => {\r\n      setLoading(false);\r\n      setUserSession(response.data.token, response.data.user);\r\n      props.history.push('/host_groups');\r\n    }).catch(error => {\r\n      setLoading(false);\r\n      if (error.response.status === 401) setError(error.response.data.message);\r\n      else setError(\"Something went wrong. Please try again later.\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-form\">\r\n      <h1 className=\"text-center\">Welcome!</h1>\r\n      <h4 className=\"mb-5 text-center\">ZABBIX - PROJECT</h4>\r\n      <FormGroup>\r\n          <Label>URL Address</Label>\r\n          <Input\r\n            type=\"text\"\r\n            {...url}\r\n          />\r\n      </FormGroup>\r\n      <FormGroup>\r\n          <Label>Username</Label>\r\n          <Input\r\n            type=\"text\"\r\n            {...username}\r\n          />\r\n      </FormGroup>\r\n      <FormGroup>\r\n          <Label>Password</Label>\r\n          <Input\r\n            type=\"password\"\r\n            {...password}\r\n          />\r\n      </FormGroup>\r\n      <button type=\"submit\" value={loading ? 'Loading...' : 'Login'} onClick={handleLogin} disabled={loading} className=\"btn-lg btn-dark btn-block\">Submit</button>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nconst useFormInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  }\r\n  return {\r\n    value,\r\n    onChange: handleChange\r\n  }\r\n}\r\n\r\nexport default Login;","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Home.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\TableOfHostGroups.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\PublicRoute.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\PrivateRoute.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\TableOfHosts.js",["63"],"import React, { Component } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { getHosts } from \"../services/authService\";\r\n\r\nclass TableOfHosts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      rowsSelected: [],\r\n      isLoaded: false,\r\n      errorMessage: \"\",\r\n    };\r\n\r\n    this.columns = [\r\n      {\r\n        name: \"Host\",\r\n        selector: \"host\",\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: \"The Map\",\r\n        selector: \"map_link\",\r\n        sortable: true,\r\n        cell: (row) => <a href={row.map_link}>{row.map_link}</a>,\r\n      },\r\n      {\r\n        name: \"Name\",\r\n        selector: \"name\",\r\n        sortable: true,\r\n      },\r\n    ];\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleMaps = this.handleMaps.bind(this);\r\n    this.handleChooseGroup = this.handleChooseGroup.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const { data: post } = await getHosts(this.props.groupsId);\r\n      this.setState({ items: post });\r\n      this.setState({ isLoaded: true });\r\n    } catch (error) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  handleChange = (selectedRows) => {\r\n    this.setState({ rowsSelected: selectedRows });\r\n  };\r\n\r\n  handleMaps = () => {\r\n    if (this.state.rowsSelected.length === 0) {\r\n      this.setState({\r\n        errorMessage: \"You didn't choose any host or there are no records!\",\r\n      });\r\n    } else {\r\n      this.props.history.push(\"/maps\");\r\n      this.props.onGetMap(this.state.rowsSelected);\r\n    }\r\n  };\r\n\r\n\r\n  handleChooseGroup = () => {\r\n    this.props.history.push(\"/host_groups\");\r\n  }\r\n\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      if(this.state.items.length==0){\r\n        return <div>\r\n          <div>\r\n            Please, choose the group of hosts first.\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={this.handleChooseGroup}\r\n            >\r\n            CHOOSE THE GROUP OF HOSTS\r\n            </button>\r\n        </div>\r\n      } else {\r\n      return (\r\n        <div className=\"container\">         \r\n          \r\n          <DataTable\r\n          title={\"HOSTS\"}\r\n            columns={this.columns}\r\n            data={this.state.items}\r\n            selectableRows\r\n            onSelectedRowsChange={(state) =>\r\n              this.handleChange(state.selectedRows)\r\n            }\r\n            highlightOnHover\r\n          />\r\n\r\n          {this.state.errorMessage && (\r\n            <div className=\"alert alert-warning mt-3\" role=\"alert\">\r\n              {this.state.errorMessage}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"container mt-5\">\r\n            <div className=\"row\">\r\n              <div className=\"col\"></div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark\"\r\n                  onClick={this.handleMaps}\r\n                >\r\n                  GET A MAP\r\n                </button>\r\n              </div>\r\n              <div className=\"col\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n }\r\n}\r\n\r\nexport default TableOfHosts;\r\n","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\components\\Map.js",["64","65","66"],"import React, { Component } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { getMaps } from \"../services/authService\";\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n      mapExists: false,\r\n    };\r\n\r\n    this.columns = [\r\n      {\r\n        name: \"THE LINKS TO THE MAPS\",\r\n        cell: (row)=> row.charAt(0)=='h' ? <a href={row}>{row}</a> : <a>{row}</a>\r\n      },\r\n    ];\r\n\r\n    this.handleMapExists = this.handleMapExists.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      let { data: post } = await getMaps(this.props.hostsId);\r\n      const test = post[0].error;\r\n      this.setState({items: post});\r\n      this.setState({ isLoaded: true });\r\n\r\n    \r\n    } catch (err) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  \r\n  handleMapExists() {\r\n    this.props.history.push(\"/hosts\");\r\n  }\r\n\r\n  handleItems(){\r\n    let maps = [];\r\n    let items = this.state.items;\r\n    console.log(\"Pred forom\");\r\n    for (let index = 0; index < items.length; index++) {\r\n     if (items[index].error === undefined){\r\n       maps.push(items[index]);\r\n     } else {\r\n       maps.push(items[index].error.data);\r\n       console.log('Vo fore', items[index].error);\r\n     }      \r\n    }\r\n\r\n    console.log('Cele maps', maps);\r\n    return maps;\r\n  }\r\n\r\n  render() {\r\n   if (!this.state.isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n          <DataTable\r\n            columns={this.columns}\r\n            data={this.handleItems()}\r\n            highlightOnHover\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\services\\httpService.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\Utils\\Common.js",[],"C:\\Users\\Stanka\\Documents\\react\\login-app\\src\\services\\authService.js",[],["67","68"],{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":9},{"ruleId":"69","severity":1,"message":"73","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":14},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"69","severity":1,"message":"78","line":21,"column":10,"nodeType":"71","messageId":"72","endLine":21,"endColumn":21},{"ruleId":"69","severity":1,"message":"79","line":13,"column":10,"nodeType":"71","messageId":"72","endLine":13,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":74,"column":33,"nodeType":"82","messageId":"83","endLine":74,"endColumn":35},{"ruleId":"80","severity":1,"message":"81","line":17,"column":36,"nodeType":"82","messageId":"83","endLine":17,"endColumn":38},{"ruleId":"84","severity":1,"message":"85","line":17,"column":70,"nodeType":"86","endLine":17,"endColumn":73},{"ruleId":"69","severity":1,"message":"87","line":27,"column":13,"nodeType":"71","messageId":"72","endLine":27,"endColumn":17},{"ruleId":"74","replacedBy":"88"},{"ruleId":"76","replacedBy":"89"},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'authLoading' is assigned a value but never used.","'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'test' is assigned a value but never used.",["90"],["91"],"no-global-assign","no-unsafe-negation"]